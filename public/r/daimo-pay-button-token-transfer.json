{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "daimo-pay-button-token-transfer",
  "type": "registry:component",
  "title": "Daimo Pay Button Token Transfer",
  "description": "A custom button for transferring tokens",
  "dependencies": [
    "@daimo/pay",
    "@daimo/contract",
    "wagmi",
    "viem",
    "zod",
    "@daimo/pay",
    "@daimo/contract",
    "viem",
    "wagmi",
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/mini-app/blocks/daimo-pay-transfer/components/daimo-pay-transfer-button.tsx",
      "content": "import { cache } from \"react\";\nimport { getPokemon } from \"@/registry/mini-app/blocks/complex-component/lib/pokemon\";\nimport { Card, CardContent } from \"@/registry/mini-app/ui/card\";\nimport { PokemonImage } from \"@/registry/mini-app/blocks/complex-component/components/pokemon-image\";\nimport { DaimoPayButton } from \"@daimo/pay\";\nimport { baseUSDC } from \"@daimo/contract\";\nimport { getAddress } from \"viem\";\nimport { useAccount } from \"wagmi\";\nimport { Button } from \"@/registry/mini-app/ui/button\";\n\nconst cachedGetPokemon = cache(getPokemon);\n\nexport async function DaimoPayTransferButton({\n  text,\n  toAddress,\n  amount,\n  onPaymentStarted,\n  onPaymentCompleted,\n}: {\n  text: string;\n  toAddress: `0x${string}`;\n  amount: string;\n  onPaymentStarted?: () => void;\n  onPaymentCompleted?: () => void;\n}) {\n  return (\n    <div className=\"flex justify-center px-8 py-4 bg-pink-500 text-white text-xl font-bold rounded-lg shadow-lg hover:bg-pink-400 transition-colors animate-pulse\">\n      <DaimoPayButton.Custom\n        appId={process.env.NEXT_PUBLIC_DAIMO_PAY_KEY || \"pay-demo\"}\n        toChain={baseUSDC.chainId}\n        toUnits={amount}\n        toToken={getAddress(baseUSDC.token)}\n        toAddress={toAddress}\n        onPaymentStarted={(e) => {\n          console.log(\"Payment started\", e);\n          onPaymentStarted?.();\n        }}\n        onPaymentCompleted={(e) => {\n          console.log(\"Payment completed\", e);\n          onPaymentCompleted?.();\n        }}\n        closeOnSuccess\n      >\n        {({ show: showDaimoModal }) => (\n          <Button className=\"w-full\" size=\"lg\" onClick={() => showDaimoModal()}>\n            {text}\n          </Button>\n        )}\n      </DaimoPayButton.Custom>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/mini-app/blocks/complex-component/lib/pokemon.ts",
      "content": "import { z } from \"zod\"\n\nexport async function getPokemonList({ limit = 10 }: { limit?: number }) {\n  try {\n    const response = await fetch(\n      `https://pokeapi.co/api/v2/pokemon?limit=${limit}`\n    )\n    return z\n      .object({\n        results: z.array(z.object({ name: z.string() })),\n      })\n      .parse(await response.json())\n  } catch (error) {\n    console.error(error)\n    return null\n  }\n}\n\nexport async function getPokemon(name: string) {\n  try {\n    const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${name}`)\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch pokemon\")\n    }\n\n    return z\n      .object({\n        name: z.string(),\n        id: z.number(),\n        sprites: z.object({\n          front_default: z.string(),\n        }),\n        stats: z.array(\n          z.object({\n            base_stat: z.number(),\n            stat: z.object({\n              name: z.string(),\n            }),\n          })\n        ),\n      })\n      .parse(await response.json())\n  } catch (error) {\n    console.error(error)\n    return null\n  }\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/mini-app/ui/card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/mini-app/blocks/complex-component/components/pokemon-image.tsx",
      "content": "\"use client\";\n\n/* eslint-disable @next/next/no-img-element */\nimport { usePokemonImage } from \"@/registry/mini-app/blocks/complex-component/hooks/use-pokemon\";\n\nexport function PokemonImage({\n  name,\n  number,\n}: {\n  name: string;\n  number: number;\n}) {\n  const imageUrl = usePokemonImage(number);\n\n  if (!imageUrl) {\n    return null;\n  }\n\n  return <img src={imageUrl} alt={name} />;\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry/mini-app/blocks/complex-component/hooks/use-pokemon.ts",
      "content": "\"use client\"\n\n// Totally unnecessary hook, but it's a good example of how to use a hook in a custom registry.\n\nexport function usePokemonImage(number: number) {\n  return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${number}.png`\n}\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "registry/mini-app/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}