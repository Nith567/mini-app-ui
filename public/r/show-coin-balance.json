{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "show-coin-balance",
  "type": "registry:component",
  "title": "Show Coin Balance",
  "description": "Show coin/token balance for an address using Alchemy SDK",
  "dependencies": [
    "alchemy-sdk",
    "@farcaster/frame-sdk",
    "@farcaster/frame-sdk",
    "@farcaster/frame-core",
    "alchemy-sdk",
    "viem"
  ],
  "registryDependencies": [
    "button",
    "input",
    "https://hellno-mini-app-ui.vercel.app/r/use-miniapp-sdk.json"
  ],
  "files": [
    {
      "path": "registry/mini-app/blocks/show-coin-balance/show-coin-balance.tsx",
      "content": "import { useState, useMemo, useEffect } from \"react\";\nimport { Input } from \"@/registry/mini-app/ui/input\";\nimport { useMiniAppSdk } from \"@/registry/mini-app/hooks/use-miniapp-sdk\";\nimport { Alchemy, Network } from \"alchemy-sdk\";\nimport { parseUnits, isAddress } from \"viem\";\n\n// Helper function to check if input looks like an ENS name\nconst isEnsName = (input: string): boolean => {\n  return input.includes(\".\") && !isAddress(input) && input.length > 3;\n};\n\nexport function ShowCoinBalance({\n  defaultTokenAddress,\n  chainId,\n  network,\n}: {\n  defaultTokenAddress?: `0x${string}`;\n  chainId?: number;\n  network?: Network;\n}) {\n  useMiniAppSdk();\n  const [address, setAddress] = useState(\"\");\n  const [tokenAddress, setTokenAddress] = useState(defaultTokenAddress || \"\");\n  const [balance, setBalance] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Check if address is valid (either a proper address or ENS name)\n  const isValidAddress = useMemo(() => {\n    return address && (isAddress(address) || isEnsName(address));\n  }, [address]);\n\n  const fetchTokenBalance = async (\n    targetAddress: string,\n    tokenAddr: string,\n  ) => {\n    setLoading(true);\n    setError(null); // Clear any previous errors at start\n\n    try {\n      // Map chainId to Alchemy Network\n      const getAlchemyNetwork = (chainId: number): Network => {\n        switch (chainId) {\n          case 1:\n            return Network.ETH_MAINNET;\n          case 8453:\n            return Network.BASE_MAINNET;\n          case 42161:\n            return Network.ARB_MAINNET;\n          case 421614:\n            return Network.ARB_SEPOLIA;\n          case 84532:\n            return Network.BASE_SEPOLIA;\n          case 666666666:\n            return Network.DEGEN_MAINNET;\n          case 100:\n            return Network.GNOSIS_MAINNET;\n          case 10:\n            return Network.OPT_MAINNET;\n          case 11155420:\n            return Network.OPT_SEPOLIA;\n          case 137:\n            return Network.MATIC_MAINNET;\n          case 11155111:\n            return Network.ETH_SEPOLIA;\n          case 7777777:\n            return Network.ZORA_MAINNET;\n          case 42220:\n            return Network.CELO_MAINNET;\n          default:\n            return Network.BASE_MAINNET;\n        }\n      };\n\n      // Use provided network or map from chainId\n      const finalNetwork =\n        network ||\n        (chainId ? getAlchemyNetwork(chainId) : Network.BASE_MAINNET);\n\n      // Create mainnet instance for ENS resolution\n      const mainnetAlchemy = new Alchemy({\n        apiKey: process.env.NEXT_PUBLIC_ALCHEMY_KEY,\n        network: Network.ETH_MAINNET,\n      });\n\n      // Create target network instance for token balance\n      const targetAlchemy = new Alchemy({\n        apiKey: process.env.NEXT_PUBLIC_ALCHEMY_KEY,\n        network: finalNetwork,\n      });\n\n      // Resolve ENS if needed (always on mainnet)\n      let resolvedAddress = targetAddress;\n      if (isEnsName(targetAddress)) {\n        try {\n          resolvedAddress =\n            await mainnetAlchemy.core.resolveName(targetAddress);\n          if (!resolvedAddress) {\n            throw new Error(\"ENS name could not be resolved\");\n          }\n        } catch (ensError) {\n          setError(\"Failed to resolve ENS name\");\n          setLoading(false);\n          return;\n        }\n      }\n\n      // Fetch token metadata and balance on target network\n      const [tokenMeta, result] = await Promise.all([\n        targetAlchemy.core.getTokenMetadata(tokenAddr),\n        targetAlchemy.core.getTokenBalances(resolvedAddress, [tokenAddr]),\n      ]);\n\n      const raw = result.tokenBalances[0]?.tokenBalance ?? \"0\";\n      let formatted = raw;\n\n      if (tokenMeta && tokenMeta.decimals != null) {\n        const value = BigInt(raw);\n        // Format using parseUnits for display\n        const divisor = parseUnits(\"1\", tokenMeta.decimals);\n        const display = Number(value) / Number(divisor);\n        formatted = display.toFixed(4).replace(/\\.0+$/, \"\");\n        if (tokenMeta.symbol) formatted += ` ${tokenMeta.symbol}`;\n      }\n\n      setBalance(formatted);\n    } catch (e) {\n      console.error(e);\n      setError(\"Failed to fetch token balance\");\n    }\n    setLoading(false);\n  };\n\n  // Auto-fetch balance when we have both valid address and token address\n  useEffect(() => {\n    if (isValidAddress && tokenAddress && isAddress(tokenAddress)) {\n      fetchTokenBalance(address, tokenAddress);\n    } else {\n      setBalance(null);\n      // Only set validation errors if we don't have a successful balance\n      if (!balance) {\n        if (address && !isValidAddress) {\n          setError(\"Please enter a valid address or ENS name\");\n        } else if (tokenAddress && !isAddress(tokenAddress)) {\n          setError(\"Please enter a valid token address\");\n        } else {\n          setError(null);\n        }\n      }\n    }\n  }, [isValidAddress, address, tokenAddress, balance, fetchTokenBalance]);\n\n  return (\n    <div className=\"bg-white dark:bg-card rounded-xl shadow p-4 mx-2 my-4 flex flex-col gap-4 min-w-80\">\n      <Input\n        className=\"w-full\"\n        placeholder=\"Enter address or ENS name (e.g., vitalik.eth)\"\n        value={address}\n        onChange={(e) => setAddress(e.target.value)}\n      />\n      {!defaultTokenAddress && (\n        <Input\n          className=\"w-full placeholder:text-gray-400\"\n          placeholder=\"Enter token address\"\n          value={tokenAddress}\n          onChange={(e) => setTokenAddress(e.target.value)}\n        />\n      )}\n      {((loading && !balance) ||\n        (!isValidAddress && address) ||\n        (!tokenAddress && !balance)) && (\n        <div className=\"text-center text-sm text-muted-foreground min-h-5\">\n          {loading\n            ? \"Fetching balance...\"\n            : \"Enter both address and token address\"}\n        </div>\n      )}\n      {error && <div className=\"text-red-500 text-xs min-h-4\">{error}</div>}\n      {balance && (\n        <div className=\"text-lg font-bold flex items-center gap-2 min-h-7\">\n          <span className=\"text-muted-foreground\">Balance:</span> {balance}\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/mini-app/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/mini-app/hooks/use-miniapp-sdk.ts",
      "content": "\"use client\";\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport sdk from \"@farcaster/frame-sdk\";\nimport type { Context } from \"@farcaster/frame-core\";\nexport function useMiniAppSdk() {\n  const [isAuthDialogOpen, setIsAuthDialogOpen] = useState(false);\n\n  const [isSDKLoaded, setIsSDKLoaded] = useState(false);\n  const [context, setContext] = useState<Context.FrameContext>();\n  const [isMiniAppSaved, setIsMiniAppSaved] = useState(false);\n  const [lastEvent, setLastEvent] = useState(\"\");\n  const [pinFrameResponse, setPinFrameResponse] = useState(\"\");\n  const [isSigningIn, setIsSigningIn] = useState(false);\n\n  useEffect(() => {\n    if (!sdk) return;\n\n    sdk.on(\"frameAdded\", ({ notificationDetails }) => {\n      setLastEvent(\n        `frameAdded${notificationDetails ? \", notifications enabled\" : \"\"}`,\n      );\n      setIsMiniAppSaved(true);\n    });\n\n    sdk.on(\"frameAddRejected\", ({ reason }) => {\n      setLastEvent(`frameAddRejected, reason ${reason}`);\n    });\n\n    sdk.on(\"frameRemoved\", () => {\n      setLastEvent(\"frameRemoved\");\n      setIsMiniAppSaved(false);\n    });\n\n    sdk.on(\"notificationsEnabled\", ({ notificationDetails }) => {\n      setLastEvent(\"notificationsEnabled\");\n    });\n\n    sdk.on(\"notificationsDisabled\", () => {\n      setLastEvent(\"notificationsDisabled\");\n    });\n\n    // Mark SDK as ready\n    sdk.actions.ready({});\n    setIsSDKLoaded(true);\n\n    // Clean up on unmount\n    return () => {\n      sdk.removeAllListeners();\n    };\n  }, []);\n\n  useEffect(() => {\n    const updateContext = async () => {\n      const frameContext = await sdk.context;\n      if (frameContext) {\n        setContext(frameContext);\n        setIsMiniAppSaved(frameContext.client.added);\n      }\n    };\n\n    if (isSDKLoaded) {\n      updateContext();\n    }\n  }, [isSDKLoaded]);\n\n  const pinFrame = useCallback(async () => {\n    try {\n      const result = await sdk.actions.addFrame();\n      console.log(\"addFrame result\", result);\n      // @ts-expect-error - result type mixup\n      if (result.added) {\n        setPinFrameResponse(\n          result.notificationDetails\n            ? `Added, got notificaton token ${result.notificationDetails.token} and url ${result.notificationDetails.url}`\n            : \"Added, got no notification details\",\n        );\n      }\n    } catch (error) {\n      setPinFrameResponse(`Error: ${error}`);\n    }\n  }, []);\n\n  return {\n    context,\n    pinFrame,\n    pinFrameResponse,\n    isMiniAppSaved,\n    lastEvent,\n    sdk,\n    isSDKLoaded,\n    isAuthDialogOpen,\n    setIsAuthDialogOpen,\n    isSigningIn,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}