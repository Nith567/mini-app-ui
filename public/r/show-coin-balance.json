{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "show-coin-balance",
  "type": "registry:component",
  "title": "Show Coin Balance",
  "description": "Show coin/token balance for an address using Alchemy SDK",
  "dependencies": [
    "alchemy-sdk",
    "@farcaster/frame-sdk",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@farcaster/frame-sdk",
    "@farcaster/frame-core",
    "alchemy-sdk",
    "viem"
  ],
  "registryDependencies": [
    "button",
    "input",
    "https://hellno-mini-app-ui.vercel.app/r/use-miniapp-sdk.json"
  ],
  "files": [
    {
      "path": "registry/mini-app/blocks/show-coin-balance/show-coin-balance.tsx",
      "content": "import { useState } from \"react\";\nimport { Button } from \"@/registry/mini-app/ui/button\";\nimport { Input } from \"@/registry/mini-app/ui/input\";\nimport { useMiniAppSdk } from \"@/registry/mini-app/hooks/use-miniapp-sdk\";\nimport { Alchemy, Network } from \"alchemy-sdk\";\nimport { parseUnits, parseEther } from \"viem\";\n\nexport function ShowCoinBalance() {\n  useMiniAppSdk();\n  const [address, setAddress] = useState(\"\");\n  const [tokenAddress, setTokenAddress] = useState(\"\");\n  const [balance, setBalance] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchBalance = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const settings = {\n        apiKey: process.env.NEXT_PUBLIC_ALCHEMY_KEY,\n        network: Network.BASE_MAINNET,\n      };\n      const alchemy = new Alchemy(settings);\n      if (!address) {\n        setError(\"Please enter an address\");\n        setLoading(false);\n        return;\n      }\n      if (tokenAddress) {\n        const [tokenMeta, result] = await Promise.all([\n          alchemy.core.getTokenMetadata(tokenAddress),\n          alchemy.core.getTokenBalances(address, [tokenAddress]),\n        ]);\n        const raw = result.tokenBalances[0]?.tokenBalance ?? \"0\";\n        let formatted = raw;\n        if (tokenMeta && tokenMeta.decimals != null) {\n          let value: bigint;\n          if (raw.startsWith(\"0x\")) {\n            value = BigInt(raw);\n          } else {\n            value = BigInt(raw);\n          }\n          // Format using parseUnits for display\n          const divisor = parseUnits(\"1\", tokenMeta.decimals);\n          const display = Number(value) / Number(divisor);\n          formatted = display.toFixed(4).replace(/\\.0+$/, \"\");\n          if (tokenMeta.symbol) formatted += ` ${tokenMeta.symbol}`;\n        }\n        setBalance(formatted);\n        setAddress(\"\");\n        setTokenAddress(\"\");\n      } else {\n        const ethBalance = await alchemy.core.getBalance(address);\n        const divisor = parseEther(\"1\");\n        const display = Number(ethBalance) / Number(divisor);\n        setBalance(ethBalance ? display.toFixed(4) + \" ETH\" : \"0\");\n        setAddress(\"\");\n        setTokenAddress(\"\");\n      }\n    } catch {\n      setError(\"Failed to fetch balance\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-card rounded-xl shadow p-4 mx-2 my-4 flex flex-col gap-4\">\n      <Input\n        className=\"w-full\"\n        placeholder=\"Enter address\"\n        value={address}\n        onChange={e => setAddress(e.target.value)}\n      />\n      <Input\n        className=\"w-full\"\n        placeholder=\"Enter token address (optional)\"\n        value={tokenAddress}\n        onChange={e => setTokenAddress(e.target.value)}\n      />\n      <Button className=\"w-full\" onClick={fetchBalance} disabled={loading}>\n        {loading ? \"Loading...\" : \"Show Balance\"}\n      </Button>\n      {error && <div className=\"text-red-500 text-xs\">{error}</div>}\n      {balance && (\n        <div className=\"text-lg font-bold flex items-center gap-2\">\n          <span className=\"text-muted-foreground\">Balance:</span> {balance}\n        </div>\n      )}\n    </div>\n  );\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/mini-app/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/mini-app/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/mini-app/hooks/use-miniapp-sdk.ts",
      "content": "import { useCallback, useEffect, useState } from \"react\";\nimport sdk from \"@farcaster/frame-sdk\";\nimport type { Context } from \"@farcaster/frame-core\";\nexport function useMiniAppSdk() {\n  const [isAuthDialogOpen, setIsAuthDialogOpen] = useState(false);\n\n  const [isSDKLoaded, setIsSDKLoaded] = useState(false);\n  const [context, setContext] = useState<Context.FrameContext>();\n  const [isMiniAppSaved, setIsMiniAppSaved] = useState(false);\n  const [lastEvent, setLastEvent] = useState(\"\");\n  const [pinFrameResponse, setPinFrameResponse] = useState(\"\");\n  const [isSigningIn, setIsSigningIn] = useState(false);\n\n  useEffect(() => {\n    if (!sdk) return;\n\n    sdk.on(\"frameAdded\", ({ notificationDetails }) => {\n      setLastEvent(\n        `frameAdded${notificationDetails ? \", notifications enabled\" : \"\"}`,\n      );\n      setIsMiniAppSaved(true);\n    });\n\n    sdk.on(\"frameAddRejected\", ({ reason }) => {\n      setLastEvent(`frameAddRejected, reason ${reason}`);\n    });\n\n    sdk.on(\"frameRemoved\", () => {\n      setLastEvent(\"frameRemoved\");\n      setIsMiniAppSaved(false);\n    });\n\n    sdk.on(\"notificationsEnabled\", ({ notificationDetails }) => {\n      setLastEvent(\"notificationsEnabled\");\n    });\n\n    sdk.on(\"notificationsDisabled\", () => {\n      setLastEvent(\"notificationsDisabled\");\n    });\n\n    // Mark SDK as ready\n    sdk.actions.ready({});\n    setIsSDKLoaded(true);\n\n    // Clean up on unmount\n    return () => {\n      sdk.removeAllListeners();\n    };\n  }, []);\n\n  useEffect(() => {\n    const updateContext = async () => {\n      const frameContext = await sdk.context;\n      if (frameContext) {\n        setContext(frameContext);\n        setIsMiniAppSaved(frameContext.client.added);\n      }\n    };\n\n    if (isSDKLoaded) {\n      updateContext();\n    }\n  }, [isSDKLoaded]);\n\n  const pinFrame = useCallback(async () => {\n    try {\n      const result = await sdk.actions.addFrame();\n      console.log(\"addFrame result\", result);\n      // @ts-expect-error - result type mixup\n      if (result.added) {\n        setPinFrameResponse(\n          result.notificationDetails\n            ? `Added, got notificaton token ${result.notificationDetails.token} and url ${result.notificationDetails.url}`\n            : \"Added, got no notification details\",\n        );\n      }\n    } catch (error) {\n      setPinFrameResponse(`Error: ${error}`);\n    }\n  }, []);\n\n  return {\n    context,\n    pinFrame,\n    pinFrameResponse,\n    isMiniAppSaved,\n    lastEvent,\n    sdk,\n    isSDKLoaded,\n    isAuthDialogOpen,\n    setIsAuthDialogOpen,\n    isSigningIn,\n  };\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}